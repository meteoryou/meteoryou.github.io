{"version":3,"sources":["component/AddNoteForm.js","component/NoteItem.js","component/EditNoteForm.js","App.js","serviceWorker.js","index.js"],"names":["AddNoteForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","target","HTMLInputElement","setState","inputValue","value","state","_this2","react_default","a","createElement","type","placeholder","initText","onKeyPress","key","onItemAdd","id","Date","isCompleted","isEditing","note","onChange","onClick","React","Component","defaultProps","NoteItem","className","defaultChecked","onItemClick","text","onItemRemove","onItemEdit","EditNoteForm","onItemUpdate","onBlur","App","handleItemAdd","item","newItems","concat","toConsumableArray","toDoItems","handleCheckItem","index","completedItems","checkItem","newCompletedItems","newToDoItems","slice","handleUncheckItem","handleRemoveItem","itemListName","itemList","defineProperty","handleEditItem","handleItemUpdate","component_AddNoteForm","map","component_EditNoteForm","component_NoteItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.822383ff.chunk.js","sourcesContent":["import React from 'react'\n\nclass AddNoteForm extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            inputValue : ''\n        }\n    }\n\n    // //處理的方法，用e.target可以獲取到輸入框的值，用箭頭函式可以綁定`this`\n    // //輸入文字時\n    handleChange = (e) => {\n        if (e.target instanceof HTMLInputElement) {\n            this.setState({\n                inputValue: e.target.value,\n            })\n        }\n    }\n    \n    render(){\n        return(<div>\n                <input type=\"text\"\n                    value={this.state.inputValue}\n                    placeholder={this.props.initText}\n                    onKeyPress={(e)=>{\n                        if(e.key === 'Enter'){\n                            this.props.onItemAdd({\n                                id: + new Date(),\n                                value: this.state.inputValue,\n                                isCompleted : false,\n                                isEditing : false,\n                                note: e.target.value\n                            })\n                            \n                            this.setState({\n                                inputValue : ''\n                            })\n                        }\n                    }}\n                    onChange={this.handleChange}\n                />\n                <button type=\"button\"\n                                onClick={(e)=>{\n                                    this.props.onItemAdd({\n                                        id: + new Date(),\n                                        // value: this.state.inputValue,\n                                        isCompleted : false,\n                                        isEditing : false,\n                                        note : \"New Note\"\n                                        // text: e.target.value\n                                    })\n                                }}\n                >＋</button>\n                </div>)\n    }\n}\n\nAddNoteForm.defaultProps = {\n    initText : '請輸入',\n    inputValue : ''\n}\n\nexport default AddNoteForm","import React from 'react'\n\nconst NoteItem = (props) => {\n    return <div className=\"card\">\n            <input\n            type=\"checkbox\"\n            defaultChecked={props.isCompleted}\n            onClick={props.onItemClick}\n            />{props.text}\n                <button type=\"button\"\n                        onClick={props.onItemRemove}\n                    >X</button>\n                <button type=\"button\"\n                    onClick={props.onItemEdit}\n                >edit</button>\n            </div>\n}\n\nexport default NoteItem","import React from 'react'\n\nclass EditNoteForm extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            inputValue : ''\n        }\n    }\n\n    // //處理的方法，用e.target可以獲取到輸入框的值，用箭頭函式可以綁定`this`\n    // //輸入文字時\n    handleChange = (e) => {\n        if (e.target instanceof HTMLInputElement) {\n            this.setState({\n                inputValue: e.target.value,\n            })\n        }\n    }\n    \n    render(){\n        return(<div className=\"card\">\n                <input type=\"text\"\n                    onKeyPress={(e)=>{\n                        if(e.key === 'Enter'){\n                            this.props.onItemUpdate(e.target.value)\n                        }\n                    }}\n                    onBlur={(e)=>{this.props.onItemUpdate(e.target.value)}}\n                />\n                </div>)\n    }\n}\n\nEditNoteForm.defaultProps = {\n    initText : '請輸入',\n    inputValue : ''\n}\n\nexport default EditNoteForm","import React, { Component } from 'react';\nimport './App.css';\nimport AddNoteForm from './component/AddNoteForm';\nimport NoteItem from './component/NoteItem';\nimport EditNoteForm from './component/EditNoteForm';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n\n    this.state = {\n      toDoItems: [],\n      completedItems: []\n    }\n  }\n\n  handleItemAdd = (item)=>{\n    const newItems = [item, ...this.state.toDoItems ]\n\n    //按下enter後，加到列表項目中並清空輸入框\n    this.setState({\n      toDoItems: newItems\n    })\n  }\n\n  handleCheckItem = (index) => {\n    const toDoItems = this.state.toDoItems\n    const completedItems = this.state.completedItems\n\n    const checkItem = toDoItems[index]\n    checkItem.isCompleted = !checkItem.isCompleted\n\n    const newCompletedItems = [checkItem, ...completedItems]\n    const newToDoItems = toDoItems.slice(0,index).concat(toDoItems.slice(index+1))\n    \n\n    this.setState({\n      completedItems : newCompletedItems,\n      toDoItems : newToDoItems\n    })\n  }\n\n  handleUncheckItem = (index) => {\n    const toDoItems = this.state.toDoItems\n    const completedItems = this.state.completedItems\n\n    const checkItem = completedItems[index]\n    checkItem.isCompleted = !checkItem.isCompleted\n\n    const newToDoItems = [checkItem, ...toDoItems]\n    const newCompletedItems = completedItems.slice(0,index).concat(completedItems.slice(index+1))\n\n    this.setState({\n      completedItems : newCompletedItems,\n      toDoItems : newToDoItems\n    })\n  }\n\n  handleRemoveItem = (index, itemListName) => {\n    const itemList = this.state[itemListName]\n    const newItems = itemList.slice(0,index).concat(itemList.slice(index+1))\n\n    this.setState({\n      [itemListName] : newItems\n    })\n  }\n\n  handleEditItem = (index, itemListName) => {\n    const newItems = this.state[itemListName]\n\n    newItems[index].isEditing = !newItems[index].isEditing\n\n    this.setState({[itemListName] : newItems})\n  }\n\n\n  handleItemUpdate = (index, inputValue, itemListName) => {\n    const newItems = this.state[itemListName]\n\n    newItems[index].note = inputValue\n    newItems[index].isEditing = !newItems[index].isEditing\n    this.setState({[itemListName] : newItems})\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <AddNoteForm onItemAdd={this.handleItemAdd}/>\n        <h3>Todo</h3>\n        {\n          this.state.toDoItems.map((item,index) => (\n              (item.isEditing)\n              ? <EditNoteForm key={item.id}\n                          text={item.note}\n                          onItemUpdate={(inputValue) => {this.handleItemUpdate(index, inputValue, 'toDoItems')}}/>\n              : <NoteItem key={item.id} text={item.note} \n                              onItemClick={() => {this.handleCheckItem(index)}}\n                              onItemRemove={() => {this.handleRemoveItem(index, 'toDoItems')}}\n                              onItemEdit={()=>{this.handleEditItem(index, 'toDoItems')}}/>\n        ))\n        }\n      <p/>\n      <h3>Completed</h3>\n        {\n          this.state.completedItems.map((item,index) => (\n               (item.isEditing)\n                  ? <EditNoteForm key={item.id}\n                            text={item.note}\n                            onItemUpdate={(inputValue) => {this.handleItemUpdate(index, inputValue, 'completedItems')}}/>\n                  : <NoteItem key={item.id} text={item.note} \n                            onItemClick={() => {this.handleUncheckItem(index)}}\n                            onItemEdit={()=>{this.handleEditItem(index, 'completedItems')}}\n                            onItemRemove={() => {this.handleRemoveItem(index, 'completedItems')}}\n                            />\n          ))\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}